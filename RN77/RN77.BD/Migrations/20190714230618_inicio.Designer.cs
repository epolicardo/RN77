// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RN77.BD.Datos;

namespace RN77.BD.Migrations
{
    [DbContext(typeof(RN77Context))]
    [Migration("20190714230618_inicio")]
    partial class inicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaAlumnos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("AulaAlumnos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaAsistencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actividades")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("AulaAlumnoId");

                    b.Property<int?>("AulaTemaClaseId");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("NumUnidad")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("TipoClase")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AulaAlumnoId");

                    b.HasIndex("AulaTemaClaseId");

                    b.ToTable("AulaAsistencias");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaDocentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("AulaDocentes");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaEvaluaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaId");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<byte>("SePromedia");

                    b.Property<string>("TipoEvaluacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.ToTable("AulaEvaluaciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaGrupoAlumnos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaAlumnoId");

                    b.Property<int>("AulaGrupoId");

                    b.HasKey("Id");

                    b.HasIndex("AulaAlumnoId");

                    b.HasIndex("AulaGrupoId");

                    b.ToTable("AulaGrupoAlumnos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaGrupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaId");

                    b.Property<int>("CharlaId");

                    b.Property<string>("CodigoGrupo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("CharlaId");

                    b.ToTable("AulaGrupos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaNotas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AulaAlumnoId");

                    b.Property<int?>("AulaEvaluacionId");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AulaAlumnoId");

                    b.HasIndex("AulaEvaluacionId");

                    b.ToTable("AulaNotas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaTemaClases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actividades")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("AulaId");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("NumUnidad")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("TipoClase")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.ToTable("AulaTemaClases");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Aulas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnoLectivo");

                    b.Property<int>("AsistenciaValidaId");

                    b.Property<int?>("CarreraId");

                    b.Property<int?>("CarreraMateriaId");

                    b.Property<int>("CharlaId");

                    b.Property<string>("CodigoAula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("Desde")
                        .HasColumnType("date");

                    b.Property<DateTime>("Hasta")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("NotasValidaId");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CarreraId");

                    b.HasIndex("CarreraMateriaId");

                    b.HasIndex("CharlaId");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CarreraMaterias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarreraId");

                    b.Property<int>("CarreraMateriaId");

                    b.Property<string>("CodigoMateria")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CarreraId");

                    b.HasIndex("CarreraMateriaId");

                    b.ToTable("CarreraMaterias");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Carreras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoCarrera")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("InstitucionId");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Carreras");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigoArchivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharlaDigoId");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Path")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CharlaDigoId");

                    b.ToTable("CharlaDigoArchivos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigoLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharlaDigoId");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Link")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CharlaDigoId");

                    b.ToTable("CharlaDigoLinks");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharlaDigoDeDigoId");

                    b.Property<int>("CharlaId");

                    b.Property<int>("CharlaPersonaId");

                    b.Property<string>("Digo")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaDigo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CharlaDigoDeDigoId");

                    b.HasIndex("CharlaId");

                    b.HasIndex("CharlaPersonaId");

                    b.ToTable("CharlaDigos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaLeeDigos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharlaDigoId");

                    b.Property<int>("CharlaPersonaId");

                    b.Property<DateTime?>("FechaLeo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaNotifico")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaRecibe")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CharlaDigoId");

                    b.HasIndex("CharlaPersonaId");

                    b.ToTable("CharlaLeeDigos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaPersonas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharlaId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("CharlaId");

                    b.HasIndex("PersonaId");

                    b.ToTable("CharlaPersonas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Charlas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoCharla")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("PathLogo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("TcharlaId")
                        .HasColumnName("TCharlaId");

                    b.HasKey("Id");

                    b.HasIndex("TcharlaId");

                    b.ToTable("Charlas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Documentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("TdocumentoId")
                        .HasColumnName("TDocumentoId");

                    b.HasKey("Id");

                    b.HasIndex("TdocumentoId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Domicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barrio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Cp")
                        .IsRequired()
                        .HasColumnName("CP")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Dpto")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Piso")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("TdomicilioId")
                        .HasColumnName("TDomicilioId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("TdomicilioId");

                    b.ToTable("Domicilios");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionDocumentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentoId");

                    b.Property<int>("InstitucionId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("InstitucionId");

                    b.ToTable("InstitucionDocumentos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionDomicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DomicilioId");

                    b.Property<int>("InstitucionId");

                    b.HasKey("Id");

                    b.HasIndex("DomicilioId");

                    b.HasIndex("InstitucionId");

                    b.ToTable("InstitucionDomicilios");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionMails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstitucionId");

                    b.Property<int>("MailId");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("MailId");

                    b.ToTable("InstitucionMails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionTels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstitucionId");

                    b.Property<int>("TelId");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("TelId");

                    b.ToTable("InstitucionTels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Instituciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoInstitucion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("TnotaId")
                        .HasColumnName("TNotaId");

                    b.HasKey("Id");

                    b.HasIndex("TnotaId");

                    b.ToTable("Instituciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Mails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("TmailId")
                        .HasColumnName("TMailId");

                    b.HasKey("Id");

                    b.HasIndex("TmailId");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Materias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaDocumentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentoId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("PersonaDocumentos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaDomicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DomicilioId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("DomicilioId");

                    b.HasIndex("PersonaId");

                    b.ToTable("PersonaDomicilios");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaMails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MailId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("MailId");

                    b.HasIndex("PersonaId");

                    b.ToTable("PersonaMails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaTels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonaId");

                    b.Property<int>("TelId");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TelId");

                    b.ToTable("PersonaTels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Personas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tcharlas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TCharlas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tdocumentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("IX_TDocumentos");

                    b.ToTable("TDocumentos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tdomicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("IX_TDomicilio");

                    b.ToTable("TDomicilios");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("TtelId")
                        .HasColumnName("TTelId");

                    b.HasKey("Id");

                    b.HasIndex("TtelId");

                    b.ToTable("Tels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tmails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasName("IX_TMails");

                    b.ToTable("TMails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tnotas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Paso");

                    b.Property<string>("ValorMax")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("ValorMin")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TNotas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Ttels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TTels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaAlumnos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Aulas", "Aula")
                        .WithMany("AulaAlumnos")
                        .HasForeignKey("AulaId")
                        .HasConstraintName("FK_AulaAlumnos_Aulas");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("AulaAlumnos")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_AulaAlumnos_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaAsistencias", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.AulaAlumnos", "AulaAlumno")
                        .WithMany("AulaAsistencias")
                        .HasForeignKey("AulaAlumnoId")
                        .HasConstraintName("FK_AulaAsistencias_AulaAlumnos");

                    b.HasOne("RN77.BD.Datos.Entities.AulaTemaClases", "AulaTemaClase")
                        .WithMany("AulaAsistencias")
                        .HasForeignKey("AulaTemaClaseId")
                        .HasConstraintName("FK_AulaAsistencias_AulaTemaClases");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaDocentes", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Aulas", "Aula")
                        .WithMany("AulaDocentes")
                        .HasForeignKey("AulaId")
                        .HasConstraintName("FK_AulaDocentes_Aulas");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("AulaDocentes")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_AulaDocentes_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaEvaluaciones", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Aulas", "Aula")
                        .WithMany("AulaEvaluaciones")
                        .HasForeignKey("AulaId")
                        .HasConstraintName("FK_AulaEvaluaciones_Aulas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaGrupoAlumnos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.AulaAlumnos", "AulaAlumno")
                        .WithMany("AulaGrupoAlumnos")
                        .HasForeignKey("AulaAlumnoId")
                        .HasConstraintName("FK_AulaGrupoAlumnos_AulaAlumnos");

                    b.HasOne("RN77.BD.Datos.Entities.AulaGrupos", "AulaGrupo")
                        .WithMany("AulaGrupoAlumnos")
                        .HasForeignKey("AulaGrupoId")
                        .HasConstraintName("FK_AulaGrupoAlumnos_AulaGrupos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaGrupos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Aulas", "Aula")
                        .WithMany("AulaGrupos")
                        .HasForeignKey("AulaId")
                        .HasConstraintName("FK_AulaGrupos_Aulas");

                    b.HasOne("RN77.BD.Datos.Entities.Charlas", "Charla")
                        .WithMany("AulaGrupos")
                        .HasForeignKey("CharlaId")
                        .HasConstraintName("FK_AulaGrupos_Charlas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaNotas", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.AulaAlumnos", "AulaAlumno")
                        .WithMany("AulaNotas")
                        .HasForeignKey("AulaAlumnoId")
                        .HasConstraintName("FK_AulaNotas_AulaAlumnos");

                    b.HasOne("RN77.BD.Datos.Entities.AulaEvaluaciones", "AulaEvaluacion")
                        .WithMany("AulaNotas")
                        .HasForeignKey("AulaEvaluacionId")
                        .HasConstraintName("FK_AulaNotas_AulaEvaluaciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.AulaTemaClases", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Aulas", "Aula")
                        .WithMany("AulaTemaClases")
                        .HasForeignKey("AulaId")
                        .HasConstraintName("FK_AulaTemaClases_Aulas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Aulas", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Carreras", "Carrera")
                        .WithMany("Aulas")
                        .HasForeignKey("CarreraId")
                        .HasConstraintName("FK_Aulas_Carreras");

                    b.HasOne("RN77.BD.Datos.Entities.CarreraMaterias", "CarreraMateria")
                        .WithMany("Aulas")
                        .HasForeignKey("CarreraMateriaId")
                        .HasConstraintName("FK_Aulas_CarreraMaterias");

                    b.HasOne("RN77.BD.Datos.Entities.Charlas", "Charla")
                        .WithMany("Aulas")
                        .HasForeignKey("CharlaId")
                        .HasConstraintName("FK_Aulas_Charlas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CarreraMaterias", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Carreras", "Carrera")
                        .WithMany("CarreraMaterias")
                        .HasForeignKey("CarreraId")
                        .HasConstraintName("FK_CarreraMaterias_Carreras");

                    b.HasOne("RN77.BD.Datos.Entities.Materias", "CarreraMateria")
                        .WithMany("CarreraMaterias")
                        .HasForeignKey("CarreraMateriaId")
                        .HasConstraintName("FK_CarreraMaterias_Materias");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Carreras", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Instituciones", "Institucion")
                        .WithMany("Carreras")
                        .HasForeignKey("InstitucionId")
                        .HasConstraintName("FK_Carreras_Instituciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigoArchivos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.CharlaDigos", "CharlaDigo")
                        .WithMany("CharlaDigoArchivos")
                        .HasForeignKey("CharlaDigoId")
                        .HasConstraintName("FK_CharlaDigoArchivoss_CharlaDigos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigoLinks", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.CharlaDigos", "CharlaDigo")
                        .WithMany("CharlaDigoLinks")
                        .HasForeignKey("CharlaDigoId")
                        .HasConstraintName("FK_CharlaDigoLinks_CharlaDigos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaDigos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.CharlaDigos", "CharlaDigoDeDigo")
                        .WithMany("InverseCharlaDigoDeDigo")
                        .HasForeignKey("CharlaDigoDeDigoId")
                        .HasConstraintName("FK_CharlaDigos_CharlaDigos");

                    b.HasOne("RN77.BD.Datos.Entities.Charlas", "Charla")
                        .WithMany("CharlaDigos")
                        .HasForeignKey("CharlaId")
                        .HasConstraintName("FK_CharlaDigos_Charlas");

                    b.HasOne("RN77.BD.Datos.Entities.CharlaPersonas", "CharlaPersona")
                        .WithMany("CharlaDigos")
                        .HasForeignKey("CharlaPersonaId")
                        .HasConstraintName("FK_CharlaDigos_CharlaPersonas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaLeeDigos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.CharlaDigos", "CharlaDigo")
                        .WithMany("CharlaLeeDigos")
                        .HasForeignKey("CharlaDigoId")
                        .HasConstraintName("FK_CharlaLeeDigos_CharlaDigos");

                    b.HasOne("RN77.BD.Datos.Entities.CharlaPersonas", "CharlaPersona")
                        .WithMany("CharlaLeeDigos")
                        .HasForeignKey("CharlaPersonaId")
                        .HasConstraintName("FK_CharlaLeeDigos_CharlaPersonas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.CharlaPersonas", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Charlas", "Charla")
                        .WithMany("CharlaPersonas")
                        .HasForeignKey("CharlaId")
                        .HasConstraintName("FK_CharlaPersonas_Charlas");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("CharlaPersonas")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_CharlaPersonas_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Charlas", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Tcharlas", "Tcharla")
                        .WithMany("Charlas")
                        .HasForeignKey("TcharlaId")
                        .HasConstraintName("FK_Charlas_TCharlas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Documentos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Tdocumentos", "Tdocumento")
                        .WithMany("Documentos")
                        .HasForeignKey("TdocumentoId")
                        .HasConstraintName("FK_Documentos_TDocumentos");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Domicilios", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Tdomicilios", "Tdomicilio")
                        .WithMany("Domicilios")
                        .HasForeignKey("TdomicilioId")
                        .HasConstraintName("FK_Domicilios_TDomicilios");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionDocumentos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Documentos", "Documento")
                        .WithMany("InstitucionDocumentos")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_InstitucionDocumentos_Documentos");

                    b.HasOne("RN77.BD.Datos.Entities.Instituciones", "Institucion")
                        .WithMany("InstitucionDocumentos")
                        .HasForeignKey("InstitucionId")
                        .HasConstraintName("FK_InstitucionDocumentos_Instituciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionDomicilios", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Domicilios", "Domicilio")
                        .WithMany("InstitucionDomicilios")
                        .HasForeignKey("DomicilioId")
                        .HasConstraintName("FK_InstitucionDomicilios_Domicilios");

                    b.HasOne("RN77.BD.Datos.Entities.Instituciones", "Institucion")
                        .WithMany("InstitucionDomicilios")
                        .HasForeignKey("InstitucionId")
                        .HasConstraintName("FK_InstitucionDomicilios_Instituciones");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionMails", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Instituciones", "Institucion")
                        .WithMany("InstitucionMails")
                        .HasForeignKey("InstitucionId")
                        .HasConstraintName("FK_InstitucionMails_Instituciones");

                    b.HasOne("RN77.BD.Datos.Entities.Mails", "Mail")
                        .WithMany("InstitucionMails")
                        .HasForeignKey("MailId")
                        .HasConstraintName("FK_InstitucionMails_Mails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.InstitucionTels", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Instituciones", "Institucion")
                        .WithMany("InstitucionTels")
                        .HasForeignKey("InstitucionId")
                        .HasConstraintName("FK_InstitucionTels_Instituciones");

                    b.HasOne("RN77.BD.Datos.Entities.Tels", "Tel")
                        .WithMany("InstitucionTels")
                        .HasForeignKey("TelId")
                        .HasConstraintName("FK_InstitucionTels_Tels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Instituciones", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Tnotas", "Tnota")
                        .WithMany("Instituciones")
                        .HasForeignKey("TnotaId")
                        .HasConstraintName("FK_Instituciones_TNotas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Mails", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Tmails", "Tmail")
                        .WithMany("Mails")
                        .HasForeignKey("TmailId")
                        .HasConstraintName("FK_Mails_TMails");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaDocumentos", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Documentos", "Documento")
                        .WithMany("PersonaDocumentos")
                        .HasForeignKey("DocumentoId")
                        .HasConstraintName("FK_PersonaDocumentos_Documentos");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("PersonaDocumentos")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_PersonaDocumentos_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaDomicilios", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Domicilios", "Domicilio")
                        .WithMany("PersonaDomicilios")
                        .HasForeignKey("DomicilioId")
                        .HasConstraintName("FK_PersonaDomicilios_Domicilios");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("PersonaDomicilios")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_PersonaDomicilios_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaMails", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Mails", "Mail")
                        .WithMany("PersonaMails")
                        .HasForeignKey("MailId")
                        .HasConstraintName("FK_PersonaMails_Mails");

                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("PersonaMails")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_PersonaMails_Personas");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.PersonaTels", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Personas", "Persona")
                        .WithMany("PersonaTels")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_PersonaTels_Personas");

                    b.HasOne("RN77.BD.Datos.Entities.Tels", "Tel")
                        .WithMany("PersonaTels")
                        .HasForeignKey("TelId")
                        .HasConstraintName("FK_PersonaTels_Tels");
                });

            modelBuilder.Entity("RN77.BD.Datos.Entities.Tels", b =>
                {
                    b.HasOne("RN77.BD.Datos.Entities.Ttels", "Ttel")
                        .WithMany("Tels")
                        .HasForeignKey("TtelId")
                        .HasConstraintName("FK_Tels_TTels");
                });
#pragma warning restore 612, 618
        }
    }
}
